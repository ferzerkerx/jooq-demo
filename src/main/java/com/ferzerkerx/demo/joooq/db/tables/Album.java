/*
 * This file is generated by jOOQ.
*/
package com.ferzerkerx.demo.joooq.db.tables;


import com.ferzerkerx.demo.joooq.db.Keys;
import com.ferzerkerx.demo.joooq.db.Public;
import com.ferzerkerx.demo.joooq.db.tables.records.AlbumRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

    private static final long serialVersionUID = 1694498026;

    /**
     * The reference instance of <code>PUBLIC.ALBUM</code>
     */
    public static final Album ALBUM = new Album();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumRecord> getRecordType() {
        return AlbumRecord.class;
    }

    /**
     * The column <code>PUBLIC.ALBUM.ALBUM_ID</code>.
     */
    public final TableField<AlbumRecord, Integer> ALBUM_ID = createField("ALBUM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ALBUM.ARTIST_ID</code>.
     */
    public final TableField<AlbumRecord, Integer> ARTIST_ID = createField("ARTIST_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ALBUM.TITLE</code>.
     */
    public final TableField<AlbumRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ALBUM.YEAR</code>.
     */
    public final TableField<AlbumRecord, String> YEAR = createField("YEAR", org.jooq.impl.SQLDataType.VARCHAR.length(4).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ALBUM</code> table reference
     */
    public Album() {
        this("ALBUM", null);
    }

    /**
     * Create an aliased <code>PUBLIC.ALBUM</code> table reference
     */
    public Album(String alias) {
        this(alias, ALBUM);
    }

    private Album(String alias, Table<AlbumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Album(String alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumRecord>>asList(Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AlbumRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlbumRecord, ?>>asList(Keys.RECORD_ARTIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Album as(String alias) {
        return new Album(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(String name) {
        return new Album(name, null);
    }
}
